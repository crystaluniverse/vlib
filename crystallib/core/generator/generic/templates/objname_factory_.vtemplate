
module ${args.name}

import freeflowuniverse.crystallib.core.base
import freeflowuniverse.crystallib.core.playbook

@if args.cat == .installer
import freeflowuniverse.crystallib.sysadmin.startupmanager
import freeflowuniverse.crystallib.ui.console
import time
@end

__global (
	${args.name}_global map[string]&${args.classname}
	${args.name}_default string
)

/////////FACTORY

^^[params]
pub struct ArgsGet{
pub mut:
    name string = "default"
}

fn args_get (args_ ArgsGet) ArgsGet {
	mut args:=args_
	if args.name == ""{
		args.name = ${args.name}_default
	}
	if args.name == ""{
		args.name = "default"
	}
	return args
}

pub fn get(args_ ArgsGet) !&${args.classname}  {
    mut args := args_get(args_)
	if !(args.name in ${args.name}_global) {
		if ! config_exists(){
			if default{
				config_save()!
			}
		}
		config_load()!
	}
	return ${args.name}_global[args.name] or { panic("bug") }
}

//switch instance to be used for ${args.name}
pub fn switch(name string) {
	${args.name}_default = name
}


fn config_exists(args_ ArgsGet) bool {
    mut args := args_get(args_)
	mut context:=base.context() or { panic("bug") }
	return context.hero_config_exists("${args.name}",args.name)
}

fn config_load(args_ ArgsGet) ! {
	mut args := args_get(args_)
	mut context:=base.context()!
	mut heroscript := context.hero_config_get("${args.name}",args.name)!
	play(heroscript:heroscript)!
}

fn config_save(args_ ArgsGet) ! {
	mut args := args_get(args_)
	mut context:=base.context()!
	context.hero_config_set("${args.name}",args.name,heroscript_default())!
}


fn set(o ${args.classname})! {
	mut o2:=obj_init(o)!
	${args.name}_global["default"] = &o2
}


^^[params]
pub struct InstallPlayArgs {
pub mut:
	name string = 'default'
    heroscript string  //if filled in then plbook will be made out of it
    plbook     ?playbook.PlayBook 
	reset      bool
	start      bool
	stop       bool
	restart    bool
    delete     bool
    configure  bool     //make sure there is at least one installed

}

pub fn play(args_ InstallPlayArgs) ! {
	
	mut args:=args_

    if args.heroscript == "" {
        args.heroscript = heroscript_default()
    }
    mut plbook := args.plbook or {
        playbook.new(text: args.heroscript)!
    }
    
    mut install_actions := plbook.find(filter: '${args.name}.configure')!
    if install_actions.len > 0 {
        for install_action in install_actions {
            mut p := install_action.params
            cfg_play(p)!
        }
    }

}

@if args.cat == .installer

####################################################################################################
########################### LIVE CYCLE MANAGEMENT FOR INSTALLERS ###################################
####################################################################################################

@if args.startupmanager
//load from disk and make sure is properly intialized
pub fn (mut self ${args.classname}) reload() ! {
    switch(self.name)
    obj_init()!
}

pub fn (mut self ${args.classname}) start() ! {
    switch(self.name)
    if self.running()!{
        return
    }

	console.print_header('${args.name} start')

	configure()!

    start_pre()!

	mut sm := startupmanager.get()!

    for zprocess in startupcmd()!{
    	sm.start(zprocess.name)!
    }

    start_post()!

	for _ in 0 .. 50 {
		if self.running()! {
			return
		}
		time.sleep(100 * time.millisecond)
	}
	return error('${args.name} did not install properly.')

}

pub fn (mut self ${args.classname}) install_start(args RestartArgs) ! {
    switch(self.name)
    self.install(args)!
    self.start()!
}

pub fn (mut self ${args.classname}) stop() ! {
    switch(self.name)
    stop_pre()!
    mut sm := startupmanager.get()!
    for zprocess in startupcmd()!{
    	sm.stop(zprocess.name)!
    }
    stop_post()!
}

pub fn (mut self ${args.classname}) restart() ! {
    switch(self.name)
    self.stop()!
    self.start()!
}

pub fn (mut self ${args.classname}) running() !bool {
    switch(self.name)
	mut sm := startupmanager.get()!

    //walk over the generic processes, if not running return
    for zprocess in startupcmd()!{
    	r:=sm.running(zprocess.name)!
        if r==false{
            return false
        }
    }
    return running()!
}
@end

@@[params]
pub struct RestartArgs{
pub mut:
    reset bool
}

pub fn (mut self ${args.classname}) install(args RestartArgs) ! {
    switch(self.name)
    if args.reset || (!installed()!) {
        install()!
    }    
}

pub fn (mut self ${args.classname}) destroy() ! {
    switch(self.name)
@if args.startupmanager
    self.stop()!
@end
    destroy()!
}

@end