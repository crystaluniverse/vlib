import freeflowuniverse.crystallib.clients.httpconnection
import json

pub struct MyClient{
pub mut:
	name string
	url string
	connection &httpconnection.HTTPConnection
}

[params]
pub struct MyClientArgs{
pub mut:
	name string
	url string
}


pub fn client_new(args MyClientArgs) ! {
	// http.CommonHeader.authorization: 'Bearer $h.auth.auth_token'

	mut conn := httpconnection.new(name: args.name, url: args.url)!
	
	// do the cache on the connection
	conn.cache.expire_after = 3600 // make the cache expire_after 1h
	// make sure we empty cache
	conn.cache_drop()!

}


[params]
pub struct PetsListArgs{
pub mut:
	limit int
}


pub struct Pet{
pub mut:
    id i64 @[required]
    name string @[required]
    tag string
}

pub fn pets_list(args PetsListArgs) ![]Pet {
	mut connection := httpconnection.new(name: args.name, url: args.url)!

	//make mutable inside, this allows to change the request where needed
	
	dict_args:=map[string]string{}
	dict_args:={
		limit:args.limit
	}

	mut result:=[]Pet{}

	petlistjson:=connection.get_json_list(prefix:"pets",params:dict_args)!
	for petjson in petlistjson{
		mut pet:=json.decode(Pet,petjson)!
		result<<pet
	}
	
	return result
	
}



