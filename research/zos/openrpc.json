{
  "openrpc": "1.0.0",
  "info": {
    "title": "Zero OS OpenRPC API",
    "version": "1.0.0"
  },
  "methods": [
    {
      "name": "zos.DeploymentCreate",
      "description": "Deployment operations create a new empty deployment",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Deployment"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.DeploymentGet",
      "description": "get deployment by name",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Deployment",
        "schema": {
          "$ref": "#\/components\/schemas\/Deployment"
        }
      }
    },
    {
      "name": "zos.DeploymentDelete",
      "description": "delete deployment by name",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.DeploymentList",
      "description": "list deployments",
      "params": [
      ],
      "result": {
        "name": "Deployment",
        "schema": {
          "$ref": "#\/components\/schemas\/Deployment"
        }
      }
    },
    {
      "name": "zos.WorkloadState",
      "description": "return the state of the given workloads in that deployment. ? can we pass multiple names this is needed because any call to one of the _create methods does not mean the object has been created but that the request has been accepted and the object will be scheduled for creation. it means the client either has to poll for state, OR handle \"notifications\" until the workload is ready before it can move on.",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "workload",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Workload",
        "schema": {
          "$ref": "#\/components\/schemas\/Workload"
        }
      }
    },
    {
      "name": "zos.WorkloadList",
      "description": "list all the \"states\" of a deployment",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Workload",
        "schema": {
          "$ref": "#\/components\/schemas\/Workload"
        }
      }
    },
    {
      "name": "zos.NetworkSet",
      "description": "Network operations sets the network on the given deployment since you can only have one network per deployment, there is no create other calls to network_set will reconfigure the network to match Network",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "network",
          "schema": {
            "$ref": "#\/components\/schemas\/Network"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.NetworkGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Network",
        "schema": {
          "$ref": "#\/components\/schemas\/Network"
        }
      }
    },
    {
      "name": "zos.VmCreate",
      "description": "VM operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "vm",
          "schema": {
            "$ref": "#\/components\/schemas\/VM"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.VmUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "vm",
          "schema": {
            "$ref": "#\/components\/schemas\/VM"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.VmGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "vm",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "VM",
        "schema": {
          "$ref": "#\/components\/schemas\/VM"
        }
      }
    },
    {
      "name": "zos.VmDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "vm",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.VmDiskAttach",
      "description": "this is not as simple and i think we should leave it for later, and add specific VM update methods that can work on \"running vm\" pub fn (client ZOSClient) vm_update(deployment Name, vm VM) { } for example",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "vm",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "disk",
          "schema": {
            "$ref": "#\/components\/schemas\/Mount"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.VmDiskDetach",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "vm",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "disk",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.DiskCreate",
      "description": "Disk operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "params",
          "schema": {
            "$ref": "#\/components\/schemas\/Disk"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.DiskUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "params",
          "schema": {
            "$ref": "#\/components\/schemas\/Disk"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.DiskGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "disk",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Disk",
        "schema": {
          "$ref": "#\/components\/schemas\/Disk"
        }
      }
    },
    {
      "name": "zos.DiskDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "type": "name"
          }
        },
        {
          "name": "disk",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.ZdbCreate",
      "description": "ZDB operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zdb",
          "schema": {
            "$ref": "#\/components\/schemas\/Zdb"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.ZdbUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zdb",
          "schema": {
            "$ref": "#\/components\/schemas\/Zdb"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.ZdbGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zdb",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Zdb",
        "schema": {
          "$ref": "#\/components\/schemas\/Zdb"
        }
      }
    },
    {
      "name": "zos.ZdbDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zdb",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.QsfsCreate",
      "description": "QSFS operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "qsfs",
          "schema": {
            "$ref": "#\/components\/schemas\/Qsfs"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.QsfsUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "qsfs",
          "schema": {
            "$ref": "#\/components\/schemas\/Qsfs"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.QsfsGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "qsfs",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Qsfs",
        "schema": {
          "$ref": "#\/components\/schemas\/Qsfs"
        }
      }
    },
    {
      "name": "zos.QsfsDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "qsfs",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.ZlogCreate",
      "description": "Zlog operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zlog",
          "schema": {
            "$ref": "#\/components\/schemas\/Zlog"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.ZlogUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zlog",
          "schema": {
            "$ref": "#\/components\/schemas\/Zlog"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.ZlogGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zlog",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "Zlog",
        "schema": {
          "$ref": "#\/components\/schemas\/Zlog"
        }
      }
    },
    {
      "name": "zos.ZlogDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "zlog",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.GatewayFqdnCreate",
      "description": "gateway FQDN operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "fqdn",
          "schema": {
            "$ref": "#\/components\/schemas\/GatewayFqdn"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.GatewayFqdnUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "fqdn",
          "schema": {
            "$ref": "#\/components\/schemas\/GatewayFqdn"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.GatewayFqdnGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "fqdn",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "GatewayFqdn",
        "schema": {
          "$ref": "#\/components\/schemas\/GatewayFqdn"
        }
      }
    },
    {
      "name": "zos.GatewayFqdnDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "fqdn",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.GatewayNameCreate",
      "description": "gateway name operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "gateway_name",
          "schema": {
            "$ref": "#\/components\/schemas\/GatewayName"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.GatewayNameUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "gateway_name",
          "schema": {
            "$ref": "#\/components\/schemas\/GatewayName"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.GatewayNameGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "gateway_name",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "GatewayName",
        "schema": {
          "$ref": "#\/components\/schemas\/GatewayName"
        }
      }
    },
    {
      "name": "zos.GatewayNameDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "gateway_name",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.PublicIpCreate",
      "description": "public ip operations",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "public_ip",
          "schema": {
            "$ref": "#\/components\/schemas\/PublicIp"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.PublicIpUpdate",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "public_ip",
          "schema": {
            "$ref": "#\/components\/schemas\/PublicIp"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "zos.PublicIpGet",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "public_ip",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "PublicIp",
        "schema": {
          "$ref": "#\/components\/schemas\/PublicIp"
        }
      }
    },
    {
      "name": "zos.PublicIpDelete",
      "params": [
        {
          "name": "deployment",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        },
        {
          "name": "public_ip",
          "schema": {
            "$ref": "#\/components\/schemas\/Name"
          }
        }
      ],
      "result": {
        "name": "void",
        "schema": {
          "type": "null"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "ZOSClient": {
        "title": "ZOSClient"
      },
      "Deployment": {
        "title": "Deployment",
        "description": "Generic object name name must be a valid object name (validation?) Deployment will hold any user deployments (contracts)",
        "properties": {
          "name": {
            "$ref": "#\/components\/schemas\/Name"
          },
          "contracts_id": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "twin_id": {
            "type": "integer"
          }
        }
      },
      "Peer": {
        "title": "Peer",
        "description": "IPNet is a subnet always in the CIDR format <ip>\/mask it's up to implementation to deserialize that into usable lanuage specific types Unit defines a capacity unit in \"bytes\" Any \"value\" of type Unit must be in bytes only hence use the Unit mutliplies below to set the write value Peer is the description of a peer of a NetResource",
        "properties": {
          "subnet": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "wireguard_public_key": {
            "type": "string"
          },
          "allowed_ips": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "endpoint": {
            "type": "string"
          }
        }
      },
      "Network": {
        "title": "Network",
        "properties": {
          "description": {
            "description": "network description",
            "type": "string"
          },
          "ip_range": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "subnet": {
            "$ref": "#\/components\/schemas\/IPNet"
          },
          "wireguard_private_key": {
            "description": "network private key",
            "type": "string"
          },
          "wireguard_listen_port": {
            "description": "network listen port",
            "type": "integer"
          },
          "peers": {
            "$ref": "#\/components\/schemas\/Peer"
          },
          "metadata": {
            "$ref": "#\/components\/schemas\/NetworkMetadata"
          }
        }
      },
      "NetworkMetadata": {
        "title": "NetworkMetadata",
        "properties": {
          "User_access_ip": {
            "type": "string"
          },
          "private_key": {
            "type": "string"
          },
          "public_node_id": {
            "type": "integer"
          }
        }
      },
      "Disk": {
        "title": "Disk",
        "properties": {
          "name": {
            "description": "disk name",
            "type": "string"
          },
          "description": {
            "description": "disk description",
            "type": "string"
          },
          "size": {
            "$ref": "#\/components\/schemas\/Unit"
          }
        }
      },
      "Capacity": {
        "title": "Capacity",
        "description": "Capacity the expected capacity of a workload",
        "properties": {
          "cru": {
            "type": "string"
          },
          "sru": {
            "$ref": "#\/components\/schemas\/Unit"
          },
          "hru": {
            "$ref": "#\/components\/schemas\/Unit"
          },
          "mru": {
            "$ref": "#\/components\/schemas\/Unit"
          }
        }
      },
      "VM": {
        "title": "VM",
        "properties": {
          "name": {
            "$ref": "#\/components\/schemas\/Name"
          },
          "description": {
            "description": "vm description",
            "type": "string"
          },
          "flist": {
            "description": "vm flist network is not needed it can only be the deployment network. We don't have to reference it by name anymore what to do if deployment have no network ? NOTE: this might change later during development if we need to support other networking modes network        bool   \/\/ vm network",
            "type": "string"
          },
          "size": {
            "$ref": "#\/components\/schemas\/Unit"
          },
          "capacity": {
            "$ref": "#\/components\/schemas\/Capacity"
          },
          "mounts": {
            "$ref": "#\/components\/schemas\/Mount"
          },
          "entrypoint": {
            "description": "vm entry point",
            "type": "string"
          },
          "env": {
            "description": "{\"key\":\"value\"}",
            "type": "object"
          },
          "corex": {
            "description": "vm corex",
            "type": "boolean"
          },
          "gpus": {
            "$ref": "#\/components\/schemas\/GPU"
          }
        }
      },
      "Mount": {
        "title": "Mount",
        "properties": {
          "name": {
            "$ref": "#\/components\/schemas\/Name"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "ZDBGroup": {
        "title": "ZDBGroup",
        "properties": {
          "backends": {
            "$ref": "#\/components\/schemas\/ZDBBackend"
          }
        }
      },
      "ZDBBackend": {
        "title": "ZDBBackend",
        "properties": {
          "address": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Zdb": {
        "title": "Zdb",
        "properties": {
          "name": {
            "description": "zdb name",
            "type": "string"
          },
          "mode": {
            "$ref": "#\/components\/schemas\/ZDBMode"
          },
          "size": {
            "$ref": "#\/components\/schemas\/Unit"
          },
          "password": {
            "type": "string"
          },
          "public": {
            "description": "if zdb gets a public ip6",
            "type": "boolean"
          }
        }
      },
      "QuantumSafeMeta": {
        "title": "QuantumSafeMeta",
        "properties": {
          "typ_": {
            "type": "string"
          },
          "config": {
            "$ref": "#\/components\/schemas\/QuantumSafeConfig"
          }
        }
      },
      "QuantumSafeConfig": {
        "title": "QuantumSafeConfig",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "encryption": {
            "$ref": "#\/components\/schemas\/Encryption"
          },
          "backends": {
            "$ref": "#\/components\/schemas\/ZDBBackend"
          }
        }
      },
      "Encryption": {
        "title": "Encryption",
        "properties": {
          "algorithm": {
            "$ref": "#\/components\/schemas\/EncryptionAlgorithm"
          },
          "key": {
            "$ref": "#\/components\/schemas\/EncryptionKey"
          }
        }
      },
      "QuantumCompression": {
        "title": "QuantumCompression",
        "properties": {
          "algorithm": {
            "type": "string"
          }
        }
      },
      "Qsfs": {
        "title": "Qsfs",
        "properties": {
          "name": {
            "description": "qsfs name",
            "type": "string"
          },
          "cache": {
            "$ref": "#\/components\/schemas\/Unit"
          },
          "minimal_shards": {
            "description": "qsfs minimal shards",
            "type": "integer"
          },
          "expected_shards": {
            "description": "qsfs expected shards",
            "type": "integer"
          },
          "redundant_groups": {
            "description": "qsfs redundant groups",
            "type": "integer"
          },
          "redundant_nodes": {
            "description": "qsfs redundant nodes",
            "type": "integer"
          },
          "max_zdb_data_dir_size": {
            "description": "qsfs max zdb data dir size",
            "type": "integer"
          },
          "encryption": {
            "$ref": "#\/components\/schemas\/Encryption"
          },
          "metadata": {
            "$ref": "#\/components\/schemas\/QuantumSafeMeta"
          },
          "groups": {
            "$ref": "#\/components\/schemas\/ZDBGroup"
          },
          "compression": {
            "$ref": "#\/components\/schemas\/QuantumCompression"
          }
        }
      },
      "Zlog": {
        "title": "Zlog",
        "properties": {
          "name": {
            "description": "zlog name",
            "type": "string"
          },
          "vm_name": {
            "description": "vm name",
            "type": "string"
          },
          "output": {
            "description": "zlog output",
            "type": "string"
          }
        }
      },
      "GatewayFqdn": {
        "title": "GatewayFqdn",
        "properties": {
          "name": {
            "description": "gateway name",
            "type": "string"
          },
          "fqdn": {
            "description": "fqdn",
            "type": "string"
          },
          "tls_passthrough": {
            "description": "tls passthrough is optional",
            "type": "string"
          },
          "network": {
            "description": "gateway network",
            "type": "string"
          },
          "backends": {
            "$ref": "#\/components\/schemas\/Backend"
          }
        }
      },
      "GatewayName": {
        "title": "GatewayName",
        "properties": {
          "name": {
            "description": "gateway name",
            "type": "string"
          },
          "tls_passthrough": {
            "description": "tls passthrough is optional",
            "type": "boolean"
          },
          "network": {
            "description": "gateway network",
            "type": "string"
          },
          "backends": {
            "$ref": "#\/components\/schemas\/Backend"
          }
        }
      },
      "PublicIp": {
        "title": "PublicIp",
        "properties": {
          "name": {
            "description": "public_ip name",
            "type": "string"
          },
          "ipv4": {
            "description": "if it contains an ipv4",
            "type": "boolean"
          },
          "ipv6": {
            "description": "if it contains an ipv6",
            "type": "boolean"
          }
        }
      },
      "Workload": {
        "title": "Workload",
        "properties": {
          "name": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "state": {
            "$ref": "#\/components\/schemas\/State"
          },
          "data": {
            "description": "kind specific data",
            "type": "any"
          }
        }
      }
    }
  }
}